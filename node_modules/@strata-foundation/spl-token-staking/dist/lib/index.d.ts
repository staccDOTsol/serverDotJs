import { Program, Provider } from "@project-serum/anchor";
import { MintInfo } from "@solana/spl-token";
import { PublicKey } from "@solana/web3.js";
import { AnchorSdk, InstructionResult } from "@strata-foundation/spl-utils";
import BN from "bn.js";
import { PeriodUnit, SplTokenStakingIDL, TokenStakingV0 } from "./generated/spl-token-staking";
export * from "./generated/spl-token-staking";
interface ICreateTokenStakingArgs {
    authority?: PublicKey;
    baseMint: PublicKey;
    periodUnit: any;
    period: number;
    payer?: PublicKey;
    rewardPercentPerPeriodPerLockupPeriod: number;
    targetMint?: PublicKey;
    targetMintDecimals: number;
}
interface IStakeArgs {
    tokenStaking: PublicKey;
    amount: BN;
    lockupPeriods: BN;
    owner?: PublicKey;
    payer?: PublicKey;
    voucherNumber?: number;
}
interface IUnstakeArgs {
    tokenStaking: PublicKey;
    stakingVoucher: PublicKey;
}
interface ICollectArgs {
    payer?: PublicKey;
    tokenStaking: PublicKey;
    stakingVoucher: PublicKey;
}
export declare class SplTokenStaking extends AnchorSdk<SplTokenStakingIDL> {
    constructor(provider: Provider, program: Program<SplTokenStakingIDL>);
    get defaults(): {
        periodUnit: PeriodUnit;
        period: number;
        targetMintDecimals: number;
        rewardPercentPerPeriodPerLockupPeriod: number;
    };
    static PERIOD_MULTIPLIERS: Record<string, number>;
    getPeriod(staking: TokenStakingV0, unixTs: number): number;
    getTotalTargetSupply(targetMint: MintInfo, staking: TokenStakingV0): number;
    getTotalTargetSupplyFromKey(tokenStaking: PublicKey): Promise<number>;
    createTokenStakingInstructions({ authority, payer, baseMint, periodUnit, period, rewardPercentPerPeriodPerLockupPeriod, targetMintDecimals, targetMint }: ICreateTokenStakingArgs): Promise<InstructionResult<{
        tokenStaking: PublicKey;
        tokenStakingBumpSeed: number;
        targetMint: PublicKey;
    }>>;
    createTokenStaking(args: ICreateTokenStakingArgs): Promise<PublicKey>;
    stakeInstructions({ tokenStaking, amount, voucherNumber, lockupPeriods, owner, payer, }: IStakeArgs): Promise<InstructionResult<{
        stakingVoucher: PublicKey;
    }>>;
    stake(args: IStakeArgs): Promise<PublicKey>;
    collectInstructions({ tokenStaking, stakingVoucher, payer, }: ICollectArgs): Promise<InstructionResult<{
        destination: PublicKey;
    }>>;
    collect(args: ICollectArgs): Promise<PublicKey>;
    unstakeInstructions({ tokenStaking, stakingVoucher, }: IUnstakeArgs): Promise<InstructionResult<null>>;
    unstake(args: IUnstakeArgs): Promise<void>;
}
//# sourceMappingURL=index.d.ts.map