"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNamespaceProgram = exports.NamespaceProgram = exports.NamespaceInstruction = exports.NamespaceWrapper = void 0;
const anchor_1 = require("@project-serum/anchor");
const web3_js_1 = require("@solana/web3.js");
const nodewallet_1 = __importDefault(require("@project-serum/anchor/dist/cjs/nodewallet"));
const loglevel_1 = __importDefault(require("loglevel"));
const programIds_1 = require("../constants/programIds");
const namespace_1 = require("../state/namespace");
const pda_1 = require("../utils/pda");
const connection_1 = require("../utils/connection");
const transactions_1 = require("../utils/transactions");
function convertNumbersToBNs(data) {
    if (data.desiredNamespaceArraySize) {
        data.desiredNamespaceArraySize = new anchor_1.BN(data.desiredNamespaceArraySize);
    }
    if (data.bump) {
        data.bump = new anchor_1.BN(data.bump);
    }
}
class NamespaceWrapper {
    constructor(args) {
        this.program = args.program;
        this.key = args.key;
        this.object = args.object;
        this.data = args.data;
    }
}
exports.NamespaceWrapper = NamespaceWrapper;
class NamespaceInstruction {
    constructor(args) {
        this.id = args.id;
        this.program = args.program;
    }
    async initializeNamespace(args, accounts, _additionalArgs = {}) {
        const [namespacePDA, namespaceBump] = await (0, pda_1.getNamespacePDA)(accounts.mint);
        args.bump = namespaceBump;
        convertNumbersToBNs(args);
        const remainingAccounts = args.whitelistedStakingMints.map(mint => { return { pubkey: mint, isWritable: false, isSigner: false }; });
        return [
            this.program.instruction.initializeNamespace(args, {
                accounts: {
                    namespace: namespacePDA,
                    mint: accounts.mint,
                    metadata: accounts.metadata,
                    masterEdition: accounts.masterEdition,
                    payer: this.program.provider.wallet.publicKey,
                    tokenProgram: programIds_1.TOKEN_PROGRAM_ID,
                    systemProgram: web3_js_1.SystemProgram.programId,
                    rent: anchor_1.web3.SYSVAR_RENT_PUBKEY,
                },
                remainingAccounts: remainingAccounts,
            })
        ];
    }
}
exports.NamespaceInstruction = NamespaceInstruction;
class NamespaceProgram {
    constructor(args) {
        this.id = args.id;
        this.program = args.program;
        this.instruction = new NamespaceInstruction({
            id: this.id,
            program: this.program,
        });
    }
    async initializeNamespace(args, accounts) {
        const instruction = await this.instruction.initializeNamespace(args, accounts);
        await (0, transactions_1.sendTransactionWithRetry)(this.program.provider.connection, this.program.provider.wallet, instruction, []);
    }
    async fetchNamespace(mint) {
        let namespacePDA = (await (0, pda_1.getNamespacePDA)(mint))[0];
        let namespaceObj = await this.program.provider.connection.getAccountInfo(namespacePDA);
        const namespaceDecoded = (0, namespace_1.decodeNamespace)(namespaceObj.data);
        namespaceDecoded.program = this.program;
        return new NamespaceWrapper({
            program: this,
            key: namespacePDA,
            data: namespaceObj.data,
            object: namespaceDecoded,
        });
    }
}
exports.NamespaceProgram = NamespaceProgram;
async function getNamespaceProgram(anchorWallet, env, customRpcUrl) {
    if (customRpcUrl)
        loglevel_1.default.debug("USING CUSTOM RPC URL:", customRpcUrl);
    const solConnection = new anchor_1.web3.Connection(customRpcUrl || (0, connection_1.getCluster)(env));
    if (anchorWallet instanceof anchor_1.web3.Keypair) {
        anchorWallet = new nodewallet_1.default(anchorWallet);
    }
    const provider = new anchor_1.Provider(solConnection, anchorWallet, {
        preflightCommitment: "recent",
    });
    const idl = await anchor_1.Program.fetchIdl(programIds_1.NAMESPACE_ID, provider);
    const program = new anchor_1.Program(idl, programIds_1.NAMESPACE_ID, provider);
    return new NamespaceProgram({
        id: programIds_1.NAMESPACE_ID,
        program,
    });
}
exports.getNamespaceProgram = getNamespaceProgram;
