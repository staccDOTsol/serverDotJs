"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NAMESPACE_SCHEMA = exports.Namespace = exports.decodeNamespace = exports.Permissiveness = exports.PermissivenessSettings = void 0;
const borsh_1 = require("borsh");
const borsh_2 = require("../utils/borsh");
const common_1 = require("./common");
(0, borsh_2.extendBorsh)();
class PermissivenessSettings {
}
exports.PermissivenessSettings = PermissivenessSettings;
var Permissiveness;
(function (Permissiveness) {
    Permissiveness[Permissiveness["All"] = 0] = "All";
    Permissiveness[Permissiveness["Whitelist"] = 1] = "Whitelist";
    Permissiveness[Permissiveness["Blacklist"] = 2] = "Blacklist";
    Permissiveness[Permissiveness["Namespace"] = 3] = "Namespace";
})(Permissiveness = exports.Permissiveness || (exports.Permissiveness = {}));
const decodeNamespace = (buffer) => {
    const metadata = (0, borsh_1.deserializeUnchecked)(exports.NAMESPACE_SCHEMA, Namespace, buffer);
    return metadata;
};
exports.decodeNamespace = decodeNamespace;
class Namespace {
}
exports.Namespace = Namespace;
exports.NAMESPACE_SCHEMA = new Map([
    [
        Namespace,
        {
            kind: "struct",
            fields: [
                ["key", "u64"],
                ["namespaces", { kind: "option", type: [common_1.NamespaceAndIndex] }],
                ["mint", "pubkey"],
                ["metadata", "pubkey"],
                ["masterEdition", "pubkey"],
                ["uuid", "string"],
                ["prettyName", "string"],
                ["artifactsAdded", "u64"],
                ["highestPage", "u64"],
                ["artifactsCached", "u64"],
                ["permissivenessSettings", PermissivenessSettings],
                ["bump", "u8"],
                ["whitelistedStakingMints", ["pubkey"]],
            ]
        }
    ]
]);
